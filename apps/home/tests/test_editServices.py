from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
import time

# Configuration
ADMIN_URL = "http://127.0.0.1:8000/adminlogin/?next=/admin"  # Change as needed
ADMIN_USERNAME = "akadmin"
ADMIN_PASSWORD = "Carmaker8DivisiveCinema"

SERVICE_NAME = "TestService"
SERVICE_COST = "123.45"
SERVICE_TIME_TO_COMPLETE = "6.7"
SERVICE_DESCRIPTION = "This is a test service generated by test script."

INVALID_SERVICE_NAME = "InvalidTestService"
INVALID_SERVICE_COST = "Hammer"
INVALID_SERVICE_TIME_TO_COMPLETE = "String"

# Initialize WebDriver 
driver = webdriver.Edge()  #I use edge, you can use any browser you want

def login(username, password):
    """ Logs into Django admin """
    driver.get(ADMIN_URL)
    time.sleep(2)

    username_input = driver.find_element(By.NAME, "username")
    password_input = driver.find_element(By.NAME, "password")
    login_button = driver.find_element(By.XPATH, "//input[@type='submit']")

    username_input.send_keys(username)
    password_input.send_keys(password)
    login_button.click()
    time.sleep(3)

def add_service():
    """Creates a new Service via Django admin"""
    
    driver.get("http://127.0.0.1:8000/adminhome/service/add/")  
    time.sleep(2)

    # Fill in the Service fields (Without Description)
    driver.find_element(By.NAME, "name").send_keys(SERVICE_NAME)
    driver.find_element(By.NAME, "cost").send_keys(SERVICE_COST)
    driver.find_element(By.NAME, "time_to_complete").send_keys(SERVICE_TIME_TO_COMPLETE)

    # Save the Service
    driver.find_element(By.NAME, "_save").click()
    time.sleep(3)

    # Display results on Services Calculator (Assumes this is the third service on the page.)
    driver.get("http://127.0.0.1:8000/schedule_appointment/")  
    time.sleep(2)
    try:
        driver.find_element(By.ID, "service3").click()
    except Exception as e:
        print(f"Error: {e}")
    
    print(f"User created {SERVICE_NAME} service entry")

def edit_service():
    """Edits a created Service via Django admin"""

    # Search for the created service
    driver.get("http://127.0.0.1:8000/adminhome/service/")
    time.sleep(2)

    search_box = driver.find_element(By.NAME, "q")
    search_box.send_keys(SERVICE_NAME)
    search_box.send_keys(Keys.RETURN)
    time.sleep(3)

    # Click on the Service to edit
    driver.find_element(By.LINK_TEXT, SERVICE_NAME).click()
    time.sleep(2)

    # Assign Description
    driver.find_element(By.NAME, "description").send_keys(SERVICE_DESCRIPTION)
    
    # Save changes
    driver.find_element(By.NAME, "_save").click()
    time.sleep(3)

    # Display results on Services Calculator (Assumes this is the third service on the page.)
    driver.get("http://127.0.0.1:8000/schedule_appointment/")  
    time.sleep(2)
    try:
        driver.find_element(By.ID, "service3").click()
        driver.find_element(By.ID, "collapse3").click()
    except Exception as e:
        print(f"Error: {e}")
    
    print(f"User edited a service entry {SERVICE_NAME}")

def delete_service():
    """ Deletes the created user via Django admin """
    driver.get("http://127.0.0.1:8000/adminhome/service/")
    time.sleep(2)
    driver.find_element(By.LINK_TEXT, SERVICE_NAME).click()

    # Find and select the service's checkbox
    try:
        user_checkbox = driver.find_element(By.XPATH, f"//th[contains(., '{SERVICE_NAME}')]/preceding-sibling::td/input[@type='checkbox']")
        user_checkbox.click()
    except Exception as e:
        print("Service checkbox not found:", e)
        return

    # Select "Delete selected users" from the action dropdown
    action_dropdown = Select(driver.find_element(By.NAME, "action"))
    action_dropdown.select_by_value("delete_selected")  

    # Click 'Go' button
    driver.find_element(By.XPATH, "//button[@type='submit' and contains(text(), 'Go')]").click()
    time.sleep(2)

    # Confirm deletion on the confirmation page
    driver.find_element(By.XPATH, "//input[@type='submit']").click()
    time.sleep(3)

    # Display results on Services Calculator
    driver.get("http://127.0.0.1:8000/schedule_appointment/")  
    time.sleep(2)

    print("Service deleted successfully.")


def verify_service_creation_failure(username, password):
    testFailed = False
    """Attempts to create an invalid Service via Django admin"""
    
    driver.get("http://127.0.0.1:8000/adminhome/service/add/")  
    time.sleep(2)

    # First, attempt all blank fields test
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for blank fields.")
        testFailed = True
    
    # Clear the text fields
    driver.find_element(By.NAME, "name").clear()
    driver.find_element(By.NAME, "cost").clear()
    driver.find_element(By.NAME, "time_to_complete").clear()

    # Next, attempt no name test
    driver.find_element(By.NAME, "cost").send_keys(SERVICE_COST)
    driver.find_element(By.NAME, "time_to_complete").send_keys(SERVICE_TIME_TO_COMPLETE)
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for no name test.")
        testFailed = True

    # Clear the text fields
    driver.find_element(By.NAME, "name").clear()
    driver.find_element(By.NAME, "cost").clear()
    driver.find_element(By.NAME, "time_to_complete").clear()

    # Next, attempt no cost test
    driver.find_element(By.NAME, "name").send_keys(SERVICE_NAME)
    driver.find_element(By.NAME, "time_to_complete").send_keys(SERVICE_TIME_TO_COMPLETE)
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for no cost test.")
        testFailed = True

    # Clear the text fields
    driver.find_element(By.NAME, "name").clear()
    driver.find_element(By.NAME, "cost").clear()
    driver.find_element(By.NAME, "time_to_complete").clear()

    # Next, attempt invalid cost test
    driver.find_element(By.NAME, "name").send_keys(SERVICE_NAME)
    driver.find_element(By.NAME, "cost").send_keys(INVALID_SERVICE_COST)
    driver.find_element(By.NAME, "time_to_complete").send_keys(SERVICE_TIME_TO_COMPLETE)
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for invalid cost test.")
        testFailed = True

    # Clear the text fields
    driver.find_element(By.NAME, "name").clear()
    driver.find_element(By.NAME, "cost").clear()
    driver.find_element(By.NAME, "time_to_complete").clear()

    # Next, attempt no time to complete test
    driver.find_element(By.NAME, "name").send_keys(SERVICE_NAME)
    driver.find_element(By.NAME, "cost").send_keys(SERVICE_COST)
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for empty time to complete test.")
        testFailed = True

    # Next, attempt invalid time to complete test
    driver.find_element(By.NAME, "name").send_keys(SERVICE_NAME)
    driver.find_element(By.NAME, "cost").send_keys(SERVICE_COST)
    driver.find_element(By.NAME, "time_to_complete").send_keys(INVALID_SERVICE_TIME_TO_COMPLETE)
    driver.find_element(By.NAME, "_save").click() 
    error_note = driver.find_element(By.CLASS_NAME, "errornote")
    if not error_note.is_displayed():
        print("Something went wrong: Error note not displayed for invalid time to complete test.")
        testFailed = True

    # Display if any tests failed
    if testFailed:
        print("One or More Invalid Input Tests Failed: Error notes listed above.")

# Execute the script
try:
    login(ADMIN_USERNAME, ADMIN_PASSWORD)
    add_service()   # Create a new test service
    driver.get("http://127.0.0.1:8000/adminlogout/")  # Logout user
    time.sleep(2)

    login(ADMIN_USERNAME, ADMIN_PASSWORD)  # Re-login as admin
    edit_service()  # Edit the test service
    driver.get("http://127.0.0.1:8000/adminlogout/")  # Logout user
    time.sleep(2)

    login(ADMIN_USERNAME, ADMIN_PASSWORD)  # Re-login as admin
    delete_service()  # Delete the test service
    driver.get("http://127.0.0.1:8000/adminlogout/")  # Logout user
    time.sleep(2)

    login(ADMIN_USERNAME, ADMIN_PASSWORD)  # Re-login as admin
    verify_service_creation_failure(ADMIN_USERNAME, ADMIN_PASSWORD)  # Attempt to create an invalid service
    driver.get("http://127.0.0.1:8000/adminlogout/")  # Logout user
    time.sleep(2)

    print("All Tests Passed: Service creation, Editing, Deletion, and failed invalid Service creation worked correctly.")

except Exception as e:
    print("The Testing failed. Please check the error message above.")

finally:
    driver.quit()
